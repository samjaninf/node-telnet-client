// Generated by CoffeeScript 1.7.1
(function() {
  var TELNET_DO, TELNET_DONT, TELNET_IAC, TELNET_SUB_BEGIN, TELNET_SUB_END, TELNET_WILL, TELNET_WONT, TelnetOutput, Transform, duplicateIAC, util;

  TELNET_DO = 253;

  TELNET_DONT = 254;

  TELNET_IAC = 255;

  TELNET_SUB_BEGIN = 250;

  TELNET_SUB_END = 240;

  TELNET_WILL = 251;

  TELNET_WONT = 252;

  Transform = require('stream').Transform;

  util = require('util');

  duplicateIAC = function(buffer) {
    var bufferIndex, data, xlateBuf, xlateIndex;
    bufferIndex = 0;
    xlateIndex = 0;
    xlateBuf = new Buffer(buffer.length * 2);
    while (bufferIndex < buffer.length) {
      data = buffer[bufferIndex];
      bufferIndex++;
      xlateBuf.writeUInt8(data, xlateIndex);
      xlateIndex++;
      if (data === TELNET_IAC) {
        xlateBuf.writeUInt8(data, xlateIndex);
        xlateIndex++;
      }
    }
    return xlateBuf.slice(0, xlateIndex);
  };

  TelnetOutput = function(options) {
    if ((this instanceof TelnetOutput) === false) {
      return new TelnetOutput(options);
    }
    Transform.call(this, options);
    return this;
  };

  util.inherits(TelnetOutput, Transform);

  TelnetOutput.prototype._transform = function(chunk, encoding, done) {
    this.push(duplicateIAC(chunk));
    return done();
  };

  TelnetOutput.prototype._writeOption = function(command, option) {
    var cmdBuf;
    cmdBuf = new Buffer(3);
    cmdBuf[0] = TELNET_IAC;
    cmdBuf[1] = command;
    cmdBuf[2] = option;
    return this.push(cmdBuf);
  };

  TelnetOutput.prototype.writeCommand = function(command) {
    var cmdBuf;
    cmdBuf = new Buffer(2);
    cmdBuf[0] = TELNET_IAC;
    cmdBuf[1] = command;
    return this.push(cmdBuf);
  };

  TelnetOutput.prototype.writeDo = function(option) {
    return this._writeOption(TELNET_DO, option);
  };

  TelnetOutput.prototype.writeDont = function(option) {
    return this._writeOption(TELNET_DONT, option);
  };

  TelnetOutput.prototype.writeSub = function(option, buffer) {
    var i, negBuf, subBuf, _i, _ref;
    negBuf = duplicateIAC(buffer);
    subBuf = new Buffer(negBuf.length + 5);
    subBuf[0] = TELNET_IAC;
    subBuf[1] = TELNET_SUB_BEGIN;
    subBuf[2] = option;
    for (i = _i = 0, _ref = negBuf.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      subBuf[i + 3] = negBuf[i];
    }
    subBuf[negBuf.length + 3] = TELNET_IAC;
    subBuf[negBuf.length + 4] = TELNET_SUB_END;
    return this.push(subBuf);
  };

  TelnetOutput.prototype.writeWill = function(option) {
    return this._writeOption(TELNET_WILL, option);
  };

  TelnetOutput.prototype.writeWont = function(option) {
    return this._writeOption(TELNET_WONT, option);
  };

  exports.TelnetOutput = TelnetOutput;

}).call(this);
